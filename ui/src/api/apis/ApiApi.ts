/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Company,
  Contact,
  ExchangeRate,
  Invoice,
  InvoiceModifier,
  ListAccounts200Response,
  ListCompanys200Response,
  ListContacts200Response,
  ListInvoiceModifiers200Response,
  ListInvoices200Response,
  ListNotes200Response,
  ListProjectSummarys200Response,
  ListProjects200Response,
  ListTasks200Response,
  ListTimeSlips200Response,
  Login,
  Note,
  OneTimeToken,
  Project,
  SSO,
  Task,
  TaskSummary,
  TimeSlip,
  User,
  Version,
} from '../models/index';
import {
    CompanyFromJSON,
    CompanyToJSON,
    ContactFromJSON,
    ContactToJSON,
    ExchangeRateFromJSON,
    ExchangeRateToJSON,
    InvoiceFromJSON,
    InvoiceToJSON,
    InvoiceModifierFromJSON,
    InvoiceModifierToJSON,
    ListAccounts200ResponseFromJSON,
    ListAccounts200ResponseToJSON,
    ListCompanys200ResponseFromJSON,
    ListCompanys200ResponseToJSON,
    ListContacts200ResponseFromJSON,
    ListContacts200ResponseToJSON,
    ListInvoiceModifiers200ResponseFromJSON,
    ListInvoiceModifiers200ResponseToJSON,
    ListInvoices200ResponseFromJSON,
    ListInvoices200ResponseToJSON,
    ListNotes200ResponseFromJSON,
    ListNotes200ResponseToJSON,
    ListProjectSummarys200ResponseFromJSON,
    ListProjectSummarys200ResponseToJSON,
    ListProjects200ResponseFromJSON,
    ListProjects200ResponseToJSON,
    ListTasks200ResponseFromJSON,
    ListTasks200ResponseToJSON,
    ListTimeSlips200ResponseFromJSON,
    ListTimeSlips200ResponseToJSON,
    LoginFromJSON,
    LoginToJSON,
    NoteFromJSON,
    NoteToJSON,
    OneTimeTokenFromJSON,
    OneTimeTokenToJSON,
    ProjectFromJSON,
    ProjectToJSON,
    SSOFromJSON,
    SSOToJSON,
    TaskFromJSON,
    TaskToJSON,
    TaskSummaryFromJSON,
    TaskSummaryToJSON,
    TimeSlipFromJSON,
    TimeSlipToJSON,
    UserFromJSON,
    UserToJSON,
    VersionFromJSON,
    VersionToJSON,
} from '../models/index';

export interface CreateCompanyRequest {
    company?: Company;
}

export interface CreateContactRequest {
    contact?: Contact;
}

export interface CreateInvoiceRequest {
    invoice?: Invoice;
}

export interface CreateLoginRequest {
    login?: Login;
}

export interface CreateNoteRequest {
    note?: Note;
}

export interface CreateProjectRequest {
    project?: Project;
}

export interface CreateSSORequest {
    sSO?: SSO;
}

export interface CreateTaskRequest {
    task?: Task;
}

export interface CreateTimeSlipRequest {
    timeSlip?: TimeSlip;
}

export interface DestroyCompanyRequest {
    id: string;
}

export interface DestroyContactRequest {
    id: string;
}

export interface DestroyInvoiceRequest {
    id: string;
}

export interface DestroyInvoiceModifierRequest {
    id: string;
    modifier: string;
}

export interface DestroyProjectRequest {
    id: string;
}

export interface DestroyTaskRequest {
    id: string;
}

export interface DestroyTimeSlipRequest {
    id: string;
}

export interface ListAccountsRequest {
    limit?: number;
    offset?: number;
}

export interface ListCompanysRequest {
    limit?: number;
    offset?: number;
}

export interface ListContactsRequest {
    limit?: number;
    offset?: number;
    search?: string;
}

export interface ListInvoiceModifiersRequest {
    limit?: number;
    offset?: number;
}

export interface ListInvoicePDFsRequest {
    id: string;
}

export interface ListInvoicesRequest {
    limit?: number;
    offset?: number;
}

export interface ListNotesRequest {
    limit?: number;
    offset?: number;
    contact?: string;
}

export interface ListProjectSummarysRequest {
    limit?: number;
    offset?: number;
}

export interface ListProjectsRequest {
    limit?: number;
    offset?: number;
}

export interface ListTasksRequest {
    limit?: number;
    offset?: number;
    invoices?: string;
    project?: string;
    noInvoice?: string;
    billingType?: ListTasksBillingTypeEnum;
    state?: ListTasksStateEnum;
}

export interface ListTimeSlipsRequest {
    limit?: number;
    offset?: number;
    invoice?: string;
    project?: string;
    start?: string;
    end?: string;
    noInvoice?: string;
}

export interface PartialUpdateCompanyRequest {
    id: string;
    company?: Company;
}

export interface PartialUpdateContactRequest {
    id: string;
    contact?: Contact;
}

export interface PartialUpdateInvoiceRequest {
    id: string;
    invoice?: Invoice;
}

export interface PartialUpdateInvoiceModifierRequest {
    id: string;
    modifier: string;
    invoiceModifier?: InvoiceModifier;
}

export interface PartialUpdateProjectRequest {
    id: string;
    project?: Project;
}

export interface PartialUpdateTaskRequest {
    id: string;
    task?: Task;
}

export interface PartialUpdateTimeSlipRequest {
    id: string;
    timeSlip?: TimeSlip;
}

export interface RetrieveCompanyRequest {
    id: string;
}

export interface RetrieveContactRequest {
    id: string;
}

export interface RetrieveInvoiceRequest {
    id: string;
}

export interface RetrieveInvoiceModifierRequest {
    id: string;
    modifier: string;
}

export interface RetrieveProjectRequest {
    id: string;
}

export interface RetrieveTaskRequest {
    id: string;
}

export interface RetrieveTaskSummaryRequest {
    id: string;
}

export interface RetrieveTimeSlipRequest {
    id: string;
}

export interface UpdateCompanyRequest {
    id: string;
    company?: Company;
}

export interface UpdateContactRequest {
    id: string;
    contact?: Contact;
}

export interface UpdateInvoiceRequest {
    id: string;
    invoice?: Invoice;
}

export interface UpdateInvoiceModifierRequest {
    id: string;
    modifier: string;
    invoiceModifier?: InvoiceModifier;
}

export interface UpdateProjectRequest {
    id: string;
    project?: Project;
}

export interface UpdateTaskRequest {
    id: string;
    task?: Task;
}

export interface UpdateTimeSlipRequest {
    id: string;
    timeSlip?: TimeSlip;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     * 
     */
    async createCompanyRaw(requestParameters: CreateCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/companies/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.company),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * 
     */
    async createCompany(requestParameters: CreateCompanyRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.createCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async createContactRaw(requestParameters: CreateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Contact>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/contacts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.contact),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     * 
     */
    async createContact(requestParameters: CreateContactRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Contact> {
        const response = await this.createContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async createInvoiceRaw(requestParameters: CreateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceToJSON(requestParameters.invoice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * 
     */
    async createInvoice(requestParameters: CreateInvoiceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.createInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async createLoginRaw(requestParameters: CreateLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Login>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginToJSON(requestParameters.login),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginFromJSON(jsonValue));
    }

    /**
     * 
     */
    async createLogin(requestParameters: CreateLoginRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Login> {
        const response = await this.createLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async createNoteRaw(requestParameters: CreateNoteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Note>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/crm/note/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NoteToJSON(requestParameters.note),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteFromJSON(jsonValue));
    }

    /**
     * 
     */
    async createNote(requestParameters: CreateNoteRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Note> {
        const response = await this.createNoteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async createProjectRaw(requestParameters: CreateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/projects/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters.project),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * 
     */
    async createProject(requestParameters: CreateProjectRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.createProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async createSSORaw(requestParameters: CreateSSORequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SSO>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/sso/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SSOToJSON(requestParameters.sSO),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SSOFromJSON(jsonValue));
    }

    /**
     * 
     */
    async createSSO(requestParameters: CreateSSORequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SSO> {
        const response = await this.createSSORaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async createTaskRaw(requestParameters: CreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tasks/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * 
     */
    async createTask(requestParameters: CreateTaskRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.createTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async createTimeSlipRaw(requestParameters: CreateTimeSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeSlip>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/timeslips/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeSlipToJSON(requestParameters.timeSlip),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSlipFromJSON(jsonValue));
    }

    /**
     * 
     */
    async createTimeSlip(requestParameters: CreateTimeSlipRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeSlip> {
        const response = await this.createTimeSlipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async destroyCompanyRaw(requestParameters: DestroyCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async destroyCompany(requestParameters: DestroyCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyCompanyRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async destroyContactRaw(requestParameters: DestroyContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async destroyContact(requestParameters: DestroyContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyContactRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async destroyInvoiceRaw(requestParameters: DestroyInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async destroyInvoice(requestParameters: DestroyInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyInvoiceRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async destroyInvoiceModifierRaw(requestParameters: DestroyInvoiceModifierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyInvoiceModifier.');
        }

        if (requestParameters.modifier === null || requestParameters.modifier === undefined) {
            throw new runtime.RequiredError('modifier','Required parameter requestParameters.modifier was null or undefined when calling destroyInvoiceModifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{id}/modifiers/{modifier}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"modifier"}}`, encodeURIComponent(String(requestParameters.modifier))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async destroyInvoiceModifier(requestParameters: DestroyInvoiceModifierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyInvoiceModifierRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async destroyProjectRaw(requestParameters: DestroyProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async destroyProject(requestParameters: DestroyProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyProjectRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async destroyTaskRaw(requestParameters: DestroyTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async destroyTask(requestParameters: DestroyTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyTaskRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async destroyTimeSlipRaw(requestParameters: DestroyTimeSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyTimeSlip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/timeslips/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * 
     */
    async destroyTimeSlip(requestParameters: DestroyTimeSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.destroyTimeSlipRaw(requestParameters, initOverrides);
    }

    /**
     * 
     */
    async listAccountsRaw(requestParameters: ListAccountsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListAccounts200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/accounts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListAccounts200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async listAccounts(requestParameters: ListAccountsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListAccounts200Response> {
        const response = await this.listAccountsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listBulkInvoicePDFsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/zip`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     */
    async listBulkInvoicePDFs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<any>> {
        const response = await this.listBulkInvoicePDFsRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listCompanysRaw(requestParameters: ListCompanysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCompanys200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/companies/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCompanys200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async listCompanys(requestParameters: ListCompanysRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCompanys200Response> {
        const response = await this.listCompanysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listContactsRaw(requestParameters: ListContactsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListContacts200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/contacts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListContacts200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async listContacts(requestParameters: ListContactsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListContacts200Response> {
        const response = await this.listContactsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listInvoiceModifiersRaw(requestParameters: ListInvoiceModifiersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListInvoiceModifiers200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/modifiers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListInvoiceModifiers200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async listInvoiceModifiers(requestParameters: ListInvoiceModifiersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListInvoiceModifiers200Response> {
        const response = await this.listInvoiceModifiersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listInvoicePDFsRaw(requestParameters: ListInvoicePDFsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<any>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listInvoicePDFs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{id}/pdf`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * 
     */
    async listInvoicePDFs(requestParameters: ListInvoicePDFsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<any>> {
        const response = await this.listInvoicePDFsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listInvoicesRaw(requestParameters: ListInvoicesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListInvoices200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListInvoices200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async listInvoices(requestParameters: ListInvoicesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListInvoices200Response> {
        const response = await this.listInvoicesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listNotesRaw(requestParameters: ListNotesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListNotes200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.contact !== undefined) {
            queryParameters['contact'] = requestParameters.contact;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/crm/note/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListNotes200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async listNotes(requestParameters: ListNotesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListNotes200Response> {
        const response = await this.listNotesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listProjectSummarysRaw(requestParameters: ListProjectSummarysRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProjectSummarys200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/summary/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListProjectSummarys200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async listProjectSummarys(requestParameters: ListProjectSummarysRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProjectSummarys200Response> {
        const response = await this.listProjectSummarysRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listProjectsRaw(requestParameters: ListProjectsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProjects200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListProjects200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async listProjects(requestParameters: ListProjectsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProjects200Response> {
        const response = await this.listProjectsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listTasksRaw(requestParameters: ListTasksRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTasks200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.invoices !== undefined) {
            queryParameters['invoices'] = requestParameters.invoices;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.noInvoice !== undefined) {
            queryParameters['no_invoice'] = requestParameters.noInvoice;
        }

        if (requestParameters.billingType !== undefined) {
            queryParameters['billing_type'] = requestParameters.billingType;
        }

        if (requestParameters.state !== undefined) {
            queryParameters['state'] = requestParameters.state;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tasks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTasks200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async listTasks(requestParameters: ListTasksRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTasks200Response> {
        const response = await this.listTasksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async listTimeSlipsRaw(requestParameters: ListTimeSlipsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListTimeSlips200Response>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.invoice !== undefined) {
            queryParameters['invoice'] = requestParameters.invoice;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        if (requestParameters.noInvoice !== undefined) {
            queryParameters['no_invoice'] = requestParameters.noInvoice;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/timeslips/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListTimeSlips200ResponseFromJSON(jsonValue));
    }

    /**
     * 
     */
    async listTimeSlips(requestParameters: ListTimeSlipsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListTimeSlips200Response> {
        const response = await this.listTimeSlipsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async partialUpdateCompanyRaw(requestParameters: PartialUpdateCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.company),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * 
     */
    async partialUpdateCompany(requestParameters: PartialUpdateCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.partialUpdateCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async partialUpdateContactRaw(requestParameters: PartialUpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.contact),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     * 
     */
    async partialUpdateContact(requestParameters: PartialUpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Contact> {
        const response = await this.partialUpdateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async partialUpdateInvoiceRaw(requestParameters: PartialUpdateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceToJSON(requestParameters.invoice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * 
     */
    async partialUpdateInvoice(requestParameters: PartialUpdateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.partialUpdateInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async partialUpdateInvoiceModifierRaw(requestParameters: PartialUpdateInvoiceModifierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceModifier>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateInvoiceModifier.');
        }

        if (requestParameters.modifier === null || requestParameters.modifier === undefined) {
            throw new runtime.RequiredError('modifier','Required parameter requestParameters.modifier was null or undefined when calling partialUpdateInvoiceModifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/{id}/modifiers/{modifier}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"modifier"}}`, encodeURIComponent(String(requestParameters.modifier))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceModifierToJSON(requestParameters.invoiceModifier),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceModifierFromJSON(jsonValue));
    }

    /**
     * 
     */
    async partialUpdateInvoiceModifier(requestParameters: PartialUpdateInvoiceModifierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceModifier> {
        const response = await this.partialUpdateInvoiceModifierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async partialUpdateProjectRaw(requestParameters: PartialUpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters.project),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * 
     */
    async partialUpdateProject(requestParameters: PartialUpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.partialUpdateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async partialUpdateTaskRaw(requestParameters: PartialUpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * 
     */
    async partialUpdateTask(requestParameters: PartialUpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.partialUpdateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async partialUpdateTimeSlipRaw(requestParameters: PartialUpdateTimeSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeSlip>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateTimeSlip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/timeslips/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TimeSlipToJSON(requestParameters.timeSlip),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSlipFromJSON(jsonValue));
    }

    /**
     * 
     */
    async partialUpdateTimeSlip(requestParameters: PartialUpdateTimeSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeSlip> {
        const response = await this.partialUpdateTimeSlipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveCompanyRaw(requestParameters: RetrieveCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveCompany(requestParameters: RetrieveCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.retrieveCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveContactRaw(requestParameters: RetrieveContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveContact(requestParameters: RetrieveContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Contact> {
        const response = await this.retrieveContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveExchangeRateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExchangeRate>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/currency/rates/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExchangeRateFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveExchangeRate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExchangeRate> {
        const response = await this.retrieveExchangeRateRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveInvoiceRaw(requestParameters: RetrieveInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveInvoice(requestParameters: RetrieveInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.retrieveInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveInvoiceModifierRaw(requestParameters: RetrieveInvoiceModifierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceModifier>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveInvoiceModifier.');
        }

        if (requestParameters.modifier === null || requestParameters.modifier === undefined) {
            throw new runtime.RequiredError('modifier','Required parameter requestParameters.modifier was null or undefined when calling retrieveInvoiceModifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{id}/modifiers/{modifier}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"modifier"}}`, encodeURIComponent(String(requestParameters.modifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceModifierFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveInvoiceModifier(requestParameters: RetrieveInvoiceModifierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceModifier> {
        const response = await this.retrieveInvoiceModifierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveOneTimeTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OneTimeToken>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/token/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OneTimeTokenFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveOneTimeToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OneTimeToken> {
        const response = await this.retrieveOneTimeTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveProjectRaw(requestParameters: RetrieveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveProject(requestParameters: RetrieveProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.retrieveProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveTaskRaw(requestParameters: RetrieveTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveTask(requestParameters: RetrieveTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.retrieveTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveTaskSummaryRaw(requestParameters: RetrieveTaskSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskSummary>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveTaskSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tasks/{id}/summary`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskSummaryFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveTaskSummary(requestParameters: RetrieveTaskSummaryRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskSummary> {
        const response = await this.retrieveTaskSummaryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveTimeSlipRaw(requestParameters: RetrieveTimeSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeSlip>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveTimeSlip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/timeslips/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSlipFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveTimeSlip(requestParameters: RetrieveTimeSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeSlip> {
        const response = await this.retrieveTimeSlipRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<User> {
        const response = await this.retrieveUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async retrieveVersionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Version>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/version/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFromJSON(jsonValue));
    }

    /**
     * 
     */
    async retrieveVersion(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Version> {
        const response = await this.retrieveVersionRaw(initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async updateCompanyRaw(requestParameters: UpdateCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.company),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     * 
     */
    async updateCompany(requestParameters: UpdateCompanyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Company> {
        const response = await this.updateCompanyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async updateContactRaw(requestParameters: UpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.contact),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     * 
     */
    async updateContact(requestParameters: UpdateContactRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Contact> {
        const response = await this.updateContactRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async updateInvoiceRaw(requestParameters: UpdateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceToJSON(requestParameters.invoice),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     * 
     */
    async updateInvoice(requestParameters: UpdateInvoiceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invoice> {
        const response = await this.updateInvoiceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async updateInvoiceModifierRaw(requestParameters: UpdateInvoiceModifierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvoiceModifier>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInvoiceModifier.');
        }

        if (requestParameters.modifier === null || requestParameters.modifier === undefined) {
            throw new runtime.RequiredError('modifier','Required parameter requestParameters.modifier was null or undefined when calling updateInvoiceModifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/{id}/modifiers/{modifier}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"modifier"}}`, encodeURIComponent(String(requestParameters.modifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceModifierToJSON(requestParameters.invoiceModifier),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceModifierFromJSON(jsonValue));
    }

    /**
     * 
     */
    async updateInvoiceModifier(requestParameters: UpdateInvoiceModifierRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvoiceModifier> {
        const response = await this.updateInvoiceModifierRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters.project),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     * 
     */
    async updateProject(requestParameters: UpdateProjectRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Project> {
        const response = await this.updateProjectRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * 
     */
    async updateTask(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.updateTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * 
     */
    async updateTimeSlipRaw(requestParameters: UpdateTimeSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TimeSlip>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTimeSlip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/timeslips/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimeSlipToJSON(requestParameters.timeSlip),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSlipFromJSON(jsonValue));
    }

    /**
     * 
     */
    async updateTimeSlip(requestParameters: UpdateTimeSlipRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TimeSlip> {
        const response = await this.updateTimeSlipRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ListTasksBillingTypeEnum = {
    Time: 'TIME',
    Fixed: 'FIXED'
} as const;
export type ListTasksBillingTypeEnum = typeof ListTasksBillingTypeEnum[keyof typeof ListTasksBillingTypeEnum];
/**
 * @export
 */
export const ListTasksStateEnum = {
    Open: 'OPEN',
    Progress: 'PROGRESS',
    Done: 'DONE'
} as const;
export type ListTasksStateEnum = typeof ListTasksStateEnum[keyof typeof ListTasksStateEnum];
