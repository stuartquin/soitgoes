/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Company,
    CompanyFromJSON,
    CompanyToJSON,
    Contact,
    ContactFromJSON,
    ContactToJSON,
    InlineResponse200,
    InlineResponse200FromJSON,
    InlineResponse200ToJSON,
    InlineResponse2001,
    InlineResponse2001FromJSON,
    InlineResponse2001ToJSON,
    InlineResponse2002,
    InlineResponse2002FromJSON,
    InlineResponse2002ToJSON,
    InlineResponse2003,
    InlineResponse2003FromJSON,
    InlineResponse2003ToJSON,
    InlineResponse2004,
    InlineResponse2004FromJSON,
    InlineResponse2004ToJSON,
    InlineResponse2005,
    InlineResponse2005FromJSON,
    InlineResponse2005ToJSON,
    InlineResponse2006,
    InlineResponse2006FromJSON,
    InlineResponse2006ToJSON,
    InlineResponse2007,
    InlineResponse2007FromJSON,
    InlineResponse2007ToJSON,
    InlineResponse2008,
    InlineResponse2008FromJSON,
    InlineResponse2008ToJSON,
    InlineResponse2009,
    InlineResponse2009FromJSON,
    InlineResponse2009ToJSON,
    Invoice,
    InvoiceFromJSON,
    InvoiceToJSON,
    InvoiceModifier,
    InvoiceModifierFromJSON,
    InvoiceModifierToJSON,
    Login,
    LoginFromJSON,
    LoginToJSON,
    Note,
    NoteFromJSON,
    NoteToJSON,
    OneTimeToken,
    OneTimeTokenFromJSON,
    OneTimeTokenToJSON,
    Project,
    ProjectFromJSON,
    ProjectToJSON,
    Task,
    TaskFromJSON,
    TaskToJSON,
    TaskSummary,
    TaskSummaryFromJSON,
    TaskSummaryToJSON,
    TimeSlip,
    TimeSlipFromJSON,
    TimeSlipToJSON,
    User,
    UserFromJSON,
    UserToJSON,
    Version,
    VersionFromJSON,
    VersionToJSON,
} from '../models';

export interface CreateCompanyRequest {
    company?: Company;
}

export interface CreateContactRequest {
    contact?: Contact;
}

export interface CreateInvoiceRequest {
    invoice?: Invoice;
}

export interface CreateLoginRequest {
    login?: Login;
}

export interface CreateNoteRequest {
    note?: Note;
}

export interface CreateProjectRequest {
    project?: Project;
}

export interface CreateTaskRequest {
    task?: Task;
}

export interface CreateTimeSlipRequest {
    timeSlip?: TimeSlip;
}

export interface DestroyCompanyRequest {
    id: string;
}

export interface DestroyContactRequest {
    id: string;
}

export interface DestroyInvoiceRequest {
    id: string;
}

export interface DestroyInvoiceModifierRequest {
    id: string;
    modifier: string;
}

export interface DestroyProjectRequest {
    id: string;
}

export interface DestroyTaskRequest {
    id: string;
}

export interface ListAccountsRequest {
    limit?: number;
    offset?: number;
}

export interface ListCompanysRequest {
    limit?: number;
    offset?: number;
}

export interface ListContactsRequest {
    limit?: number;
    offset?: number;
}

export interface ListInvoiceModifiersRequest {
    limit?: number;
    offset?: number;
}

export interface ListInvoicePDFsRequest {
    id: string;
}

export interface ListInvoicesRequest {
    limit?: number;
    offset?: number;
}

export interface ListNotesRequest {
    limit?: number;
    offset?: number;
    contact?: string;
}

export interface ListProjectSummarysRequest {
    limit?: number;
    offset?: number;
}

export interface ListProjectsRequest {
    limit?: number;
    offset?: number;
}

export interface ListTasksRequest {
    limit?: number;
    offset?: number;
    invoices?: string;
    project?: string;
    noInvoice?: string;
    billingType?: ListTasksBillingTypeEnum;
}

export interface ListTimeSlipsRequest {
    limit?: number;
    offset?: number;
    invoice?: string;
    project?: string;
    start?: string;
    end?: string;
    noInvoice?: string;
}

export interface PartialUpdateCompanyRequest {
    id: string;
    company?: Company;
}

export interface PartialUpdateContactRequest {
    id: string;
    contact?: Contact;
}

export interface PartialUpdateInvoiceRequest {
    id: string;
    invoice?: Invoice;
}

export interface PartialUpdateInvoiceModifierRequest {
    id: string;
    modifier: string;
    invoiceModifier?: InvoiceModifier;
}

export interface PartialUpdateProjectRequest {
    id: string;
    project?: Project;
}

export interface PartialUpdateTaskRequest {
    id: string;
    task?: Task;
}

export interface PartialUpdateTimeSlipRequest {
    id: string;
    timeSlip?: TimeSlip;
}

export interface RetrieveCompanyRequest {
    id: string;
}

export interface RetrieveContactRequest {
    id: string;
}

export interface RetrieveInvoiceRequest {
    id: string;
}

export interface RetrieveInvoiceModifierRequest {
    id: string;
    modifier: string;
}

export interface RetrieveProjectRequest {
    id: string;
}

export interface RetrieveTaskRequest {
    id: string;
}

export interface RetrieveTaskSummaryRequest {
    id: string;
}

export interface UpdateCompanyRequest {
    id: string;
    company?: Company;
}

export interface UpdateContactRequest {
    id: string;
    contact?: Contact;
}

export interface UpdateInvoiceRequest {
    id: string;
    invoice?: Invoice;
}

export interface UpdateInvoiceModifierRequest {
    id: string;
    modifier: string;
    invoiceModifier?: InvoiceModifier;
}

export interface UpdateProjectRequest {
    id: string;
    project?: Project;
}

export interface UpdateTaskRequest {
    id: string;
    task?: Task;
}

export interface UpdateTimeSlipRequest {
    id: string;
    timeSlip?: TimeSlip;
}

/**
 * 
 */
export class ApiApi extends runtime.BaseAPI {

    /**
     */
    async createCompanyRaw(requestParameters: CreateCompanyRequest): Promise<runtime.ApiResponse<Company>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/companies/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.company),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     */
    async createCompany(requestParameters: CreateCompanyRequest): Promise<Company> {
        const response = await this.createCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createContactRaw(requestParameters: CreateContactRequest): Promise<runtime.ApiResponse<Contact>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/contacts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.contact),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     */
    async createContact(requestParameters: CreateContactRequest): Promise<Contact> {
        const response = await this.createContactRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createInvoiceRaw(requestParameters: CreateInvoiceRequest): Promise<runtime.ApiResponse<Invoice>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceToJSON(requestParameters.invoice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     */
    async createInvoice(requestParameters: CreateInvoiceRequest): Promise<Invoice> {
        const response = await this.createInvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createLoginRaw(requestParameters: CreateLoginRequest): Promise<runtime.ApiResponse<Login>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/users/login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginToJSON(requestParameters.login),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginFromJSON(jsonValue));
    }

    /**
     */
    async createLogin(requestParameters: CreateLoginRequest): Promise<Login> {
        const response = await this.createLoginRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createNoteRaw(requestParameters: CreateNoteRequest): Promise<runtime.ApiResponse<Note>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/crm/note/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NoteToJSON(requestParameters.note),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => NoteFromJSON(jsonValue));
    }

    /**
     */
    async createNote(requestParameters: CreateNoteRequest): Promise<Note> {
        const response = await this.createNoteRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createProjectRaw(requestParameters: CreateProjectRequest): Promise<runtime.ApiResponse<Project>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/projects/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters.project),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async createProject(requestParameters: CreateProjectRequest): Promise<Project> {
        const response = await this.createProjectRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createTaskRaw(requestParameters: CreateTaskRequest): Promise<runtime.ApiResponse<Task>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tasks/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async createTask(requestParameters: CreateTaskRequest): Promise<Task> {
        const response = await this.createTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async createTimeSlipRaw(requestParameters: CreateTimeSlipRequest): Promise<runtime.ApiResponse<TimeSlip>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/timeslips/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TimeSlipToJSON(requestParameters.timeSlip),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSlipFromJSON(jsonValue));
    }

    /**
     */
    async createTimeSlip(requestParameters: CreateTimeSlipRequest): Promise<TimeSlip> {
        const response = await this.createTimeSlipRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async destroyCompanyRaw(requestParameters: DestroyCompanyRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyCompany(requestParameters: DestroyCompanyRequest): Promise<void> {
        await this.destroyCompanyRaw(requestParameters);
    }

    /**
     */
    async destroyContactRaw(requestParameters: DestroyContactRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyContact(requestParameters: DestroyContactRequest): Promise<void> {
        await this.destroyContactRaw(requestParameters);
    }

    /**
     */
    async destroyInvoiceRaw(requestParameters: DestroyInvoiceRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyInvoice(requestParameters: DestroyInvoiceRequest): Promise<void> {
        await this.destroyInvoiceRaw(requestParameters);
    }

    /**
     */
    async destroyInvoiceModifierRaw(requestParameters: DestroyInvoiceModifierRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyInvoiceModifier.');
        }

        if (requestParameters.modifier === null || requestParameters.modifier === undefined) {
            throw new runtime.RequiredError('modifier','Required parameter requestParameters.modifier was null or undefined when calling destroyInvoiceModifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{id}/modifiers/{modifier}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"modifier"}}`, encodeURIComponent(String(requestParameters.modifier))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyInvoiceModifier(requestParameters: DestroyInvoiceModifierRequest): Promise<void> {
        await this.destroyInvoiceModifierRaw(requestParameters);
    }

    /**
     */
    async destroyProjectRaw(requestParameters: DestroyProjectRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyProject(requestParameters: DestroyProjectRequest): Promise<void> {
        await this.destroyProjectRaw(requestParameters);
    }

    /**
     */
    async destroyTaskRaw(requestParameters: DestroyTaskRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling destroyTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async destroyTask(requestParameters: DestroyTaskRequest): Promise<void> {
        await this.destroyTaskRaw(requestParameters);
    }

    /**
     */
    async listAccountsRaw(requestParameters: ListAccountsRequest): Promise<runtime.ApiResponse<InlineResponse2005>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/accounts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2005FromJSON(jsonValue));
    }

    /**
     */
    async listAccounts(requestParameters: ListAccountsRequest): Promise<InlineResponse2005> {
        const response = await this.listAccountsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listBulkInvoicePDFsRaw(): Promise<runtime.ApiResponse<Array<any>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/zip`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async listBulkInvoicePDFs(): Promise<Array<any>> {
        const response = await this.listBulkInvoicePDFsRaw();
        return await response.value();
    }

    /**
     */
    async listCompanysRaw(requestParameters: ListCompanysRequest): Promise<runtime.ApiResponse<InlineResponse2009>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/companies/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2009FromJSON(jsonValue));
    }

    /**
     */
    async listCompanys(requestParameters: ListCompanysRequest): Promise<InlineResponse2009> {
        const response = await this.listCompanysRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listContactsRaw(requestParameters: ListContactsRequest): Promise<runtime.ApiResponse<InlineResponse2007>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/contacts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2007FromJSON(jsonValue));
    }

    /**
     */
    async listContacts(requestParameters: ListContactsRequest): Promise<InlineResponse2007> {
        const response = await this.listContactsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listInvoiceModifiersRaw(requestParameters: ListInvoiceModifiersRequest): Promise<runtime.ApiResponse<InlineResponse2008>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/modifiers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2008FromJSON(jsonValue));
    }

    /**
     */
    async listInvoiceModifiers(requestParameters: ListInvoiceModifiersRequest): Promise<InlineResponse2008> {
        const response = await this.listInvoiceModifiersRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listInvoicePDFsRaw(requestParameters: ListInvoicePDFsRequest): Promise<runtime.ApiResponse<Array<any>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling listInvoicePDFs.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{id}/pdf`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async listInvoicePDFs(requestParameters: ListInvoicePDFsRequest): Promise<Array<any>> {
        const response = await this.listInvoicePDFsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listInvoicesRaw(requestParameters: ListInvoicesRequest): Promise<runtime.ApiResponse<InlineResponse2003>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2003FromJSON(jsonValue));
    }

    /**
     */
    async listInvoices(requestParameters: ListInvoicesRequest): Promise<InlineResponse2003> {
        const response = await this.listInvoicesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listNotesRaw(requestParameters: ListNotesRequest): Promise<runtime.ApiResponse<InlineResponse200>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.contact !== undefined) {
            queryParameters['contact'] = requestParameters.contact;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/crm/note/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse200FromJSON(jsonValue));
    }

    /**
     */
    async listNotes(requestParameters: ListNotesRequest): Promise<InlineResponse200> {
        const response = await this.listNotesRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listProjectSummarysRaw(requestParameters: ListProjectSummarysRequest): Promise<runtime.ApiResponse<InlineResponse2002>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/summary/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2002FromJSON(jsonValue));
    }

    /**
     */
    async listProjectSummarys(requestParameters: ListProjectSummarysRequest): Promise<InlineResponse2002> {
        const response = await this.listProjectSummarysRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listProjectsRaw(requestParameters: ListProjectsRequest): Promise<runtime.ApiResponse<InlineResponse2001>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2001FromJSON(jsonValue));
    }

    /**
     */
    async listProjects(requestParameters: ListProjectsRequest): Promise<InlineResponse2001> {
        const response = await this.listProjectsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listTasksRaw(requestParameters: ListTasksRequest): Promise<runtime.ApiResponse<InlineResponse2006>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.invoices !== undefined) {
            queryParameters['invoices'] = requestParameters.invoices;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.noInvoice !== undefined) {
            queryParameters['no_invoice'] = requestParameters.noInvoice;
        }

        if (requestParameters.billingType !== undefined) {
            queryParameters['billing_type'] = requestParameters.billingType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tasks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2006FromJSON(jsonValue));
    }

    /**
     */
    async listTasks(requestParameters: ListTasksRequest): Promise<InlineResponse2006> {
        const response = await this.listTasksRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async listTimeSlipsRaw(requestParameters: ListTimeSlipsRequest): Promise<runtime.ApiResponse<InlineResponse2004>> {
        const queryParameters: any = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        if (requestParameters.invoice !== undefined) {
            queryParameters['invoice'] = requestParameters.invoice;
        }

        if (requestParameters.project !== undefined) {
            queryParameters['project'] = requestParameters.project;
        }

        if (requestParameters.start !== undefined) {
            queryParameters['start'] = requestParameters.start;
        }

        if (requestParameters.end !== undefined) {
            queryParameters['end'] = requestParameters.end;
        }

        if (requestParameters.noInvoice !== undefined) {
            queryParameters['no_invoice'] = requestParameters.noInvoice;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/timeslips/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InlineResponse2004FromJSON(jsonValue));
    }

    /**
     */
    async listTimeSlips(requestParameters: ListTimeSlipsRequest): Promise<InlineResponse2004> {
        const response = await this.listTimeSlipsRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateCompanyRaw(requestParameters: PartialUpdateCompanyRequest): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.company),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateCompany(requestParameters: PartialUpdateCompanyRequest): Promise<Company> {
        const response = await this.partialUpdateCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateContactRaw(requestParameters: PartialUpdateContactRequest): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.contact),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateContact(requestParameters: PartialUpdateContactRequest): Promise<Contact> {
        const response = await this.partialUpdateContactRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateInvoiceRaw(requestParameters: PartialUpdateInvoiceRequest): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceToJSON(requestParameters.invoice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateInvoice(requestParameters: PartialUpdateInvoiceRequest): Promise<Invoice> {
        const response = await this.partialUpdateInvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateInvoiceModifierRaw(requestParameters: PartialUpdateInvoiceModifierRequest): Promise<runtime.ApiResponse<InvoiceModifier>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateInvoiceModifier.');
        }

        if (requestParameters.modifier === null || requestParameters.modifier === undefined) {
            throw new runtime.RequiredError('modifier','Required parameter requestParameters.modifier was null or undefined when calling partialUpdateInvoiceModifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/{id}/modifiers/{modifier}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"modifier"}}`, encodeURIComponent(String(requestParameters.modifier))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceModifierToJSON(requestParameters.invoiceModifier),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceModifierFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateInvoiceModifier(requestParameters: PartialUpdateInvoiceModifierRequest): Promise<InvoiceModifier> {
        const response = await this.partialUpdateInvoiceModifierRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateProjectRaw(requestParameters: PartialUpdateProjectRequest): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters.project),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateProject(requestParameters: PartialUpdateProjectRequest): Promise<Project> {
        const response = await this.partialUpdateProjectRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateTaskRaw(requestParameters: PartialUpdateTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateTask(requestParameters: PartialUpdateTaskRequest): Promise<Task> {
        const response = await this.partialUpdateTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async partialUpdateTimeSlipRaw(requestParameters: PartialUpdateTimeSlipRequest): Promise<runtime.ApiResponse<TimeSlip>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling partialUpdateTimeSlip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/timeslips/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TimeSlipToJSON(requestParameters.timeSlip),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSlipFromJSON(jsonValue));
    }

    /**
     */
    async partialUpdateTimeSlip(requestParameters: PartialUpdateTimeSlipRequest): Promise<TimeSlip> {
        const response = await this.partialUpdateTimeSlipRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveCompanyRaw(requestParameters: RetrieveCompanyRequest): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     */
    async retrieveCompany(requestParameters: RetrieveCompanyRequest): Promise<Company> {
        const response = await this.retrieveCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveContactRaw(requestParameters: RetrieveContactRequest): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     */
    async retrieveContact(requestParameters: RetrieveContactRequest): Promise<Contact> {
        const response = await this.retrieveContactRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveInvoiceRaw(requestParameters: RetrieveInvoiceRequest): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     */
    async retrieveInvoice(requestParameters: RetrieveInvoiceRequest): Promise<Invoice> {
        const response = await this.retrieveInvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveInvoiceModifierRaw(requestParameters: RetrieveInvoiceModifierRequest): Promise<runtime.ApiResponse<InvoiceModifier>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveInvoiceModifier.');
        }

        if (requestParameters.modifier === null || requestParameters.modifier === undefined) {
            throw new runtime.RequiredError('modifier','Required parameter requestParameters.modifier was null or undefined when calling retrieveInvoiceModifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/invoices/{id}/modifiers/{modifier}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"modifier"}}`, encodeURIComponent(String(requestParameters.modifier))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceModifierFromJSON(jsonValue));
    }

    /**
     */
    async retrieveInvoiceModifier(requestParameters: RetrieveInvoiceModifierRequest): Promise<InvoiceModifier> {
        const response = await this.retrieveInvoiceModifierRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveOneTimeTokenRaw(): Promise<runtime.ApiResponse<OneTimeToken>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/token/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OneTimeTokenFromJSON(jsonValue));
    }

    /**
     */
    async retrieveOneTimeToken(): Promise<OneTimeToken> {
        const response = await this.retrieveOneTimeTokenRaw();
        return await response.value();
    }

    /**
     */
    async retrieveProjectRaw(requestParameters: RetrieveProjectRequest): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async retrieveProject(requestParameters: RetrieveProjectRequest): Promise<Project> {
        const response = await this.retrieveProjectRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveTaskRaw(requestParameters: RetrieveTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async retrieveTask(requestParameters: RetrieveTaskRequest): Promise<Task> {
        const response = await this.retrieveTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveTaskSummaryRaw(requestParameters: RetrieveTaskSummaryRequest): Promise<runtime.ApiResponse<TaskSummary>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling retrieveTaskSummary.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/tasks/{id}/summary`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskSummaryFromJSON(jsonValue));
    }

    /**
     */
    async retrieveTaskSummary(requestParameters: RetrieveTaskSummaryRequest): Promise<TaskSummary> {
        const response = await this.retrieveTaskSummaryRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async retrieveUserRaw(): Promise<runtime.ApiResponse<User>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/users/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => UserFromJSON(jsonValue));
    }

    /**
     */
    async retrieveUser(): Promise<User> {
        const response = await this.retrieveUserRaw();
        return await response.value();
    }

    /**
     */
    async retrieveVersionRaw(): Promise<runtime.ApiResponse<Version>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/version/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFromJSON(jsonValue));
    }

    /**
     */
    async retrieveVersion(): Promise<Version> {
        const response = await this.retrieveVersionRaw();
        return await response.value();
    }

    /**
     */
    async updateCompanyRaw(requestParameters: UpdateCompanyRequest): Promise<runtime.ApiResponse<Company>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateCompany.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/companies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CompanyToJSON(requestParameters.company),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => CompanyFromJSON(jsonValue));
    }

    /**
     */
    async updateCompany(requestParameters: UpdateCompanyRequest): Promise<Company> {
        const response = await this.updateCompanyRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateContactRaw(requestParameters: UpdateContactRequest): Promise<runtime.ApiResponse<Contact>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateContact.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/contacts/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ContactToJSON(requestParameters.contact),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ContactFromJSON(jsonValue));
    }

    /**
     */
    async updateContact(requestParameters: UpdateContactRequest): Promise<Contact> {
        const response = await this.updateContactRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateInvoiceRaw(requestParameters: UpdateInvoiceRequest): Promise<runtime.ApiResponse<Invoice>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInvoice.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceToJSON(requestParameters.invoice),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceFromJSON(jsonValue));
    }

    /**
     */
    async updateInvoice(requestParameters: UpdateInvoiceRequest): Promise<Invoice> {
        const response = await this.updateInvoiceRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateInvoiceModifierRaw(requestParameters: UpdateInvoiceModifierRequest): Promise<runtime.ApiResponse<InvoiceModifier>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateInvoiceModifier.');
        }

        if (requestParameters.modifier === null || requestParameters.modifier === undefined) {
            throw new runtime.RequiredError('modifier','Required parameter requestParameters.modifier was null or undefined when calling updateInvoiceModifier.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/invoices/{id}/modifiers/{modifier}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))).replace(`{${"modifier"}}`, encodeURIComponent(String(requestParameters.modifier))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InvoiceModifierToJSON(requestParameters.invoiceModifier),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => InvoiceModifierFromJSON(jsonValue));
    }

    /**
     */
    async updateInvoiceModifier(requestParameters: UpdateInvoiceModifierRequest): Promise<InvoiceModifier> {
        const response = await this.updateInvoiceModifierRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateProjectRaw(requestParameters: UpdateProjectRequest): Promise<runtime.ApiResponse<Project>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateProject.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/projects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProjectToJSON(requestParameters.project),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ProjectFromJSON(jsonValue));
    }

    /**
     */
    async updateProject(requestParameters: UpdateProjectRequest): Promise<Project> {
        const response = await this.updateProjectRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/tasks/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     */
    async updateTask(requestParameters: UpdateTaskRequest): Promise<Task> {
        const response = await this.updateTaskRaw(requestParameters);
        return await response.value();
    }

    /**
     */
    async updateTimeSlipRaw(requestParameters: UpdateTimeSlipRequest): Promise<runtime.ApiResponse<TimeSlip>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateTimeSlip.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/timeslips/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TimeSlipToJSON(requestParameters.timeSlip),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => TimeSlipFromJSON(jsonValue));
    }

    /**
     */
    async updateTimeSlip(requestParameters: UpdateTimeSlipRequest): Promise<TimeSlip> {
        const response = await this.updateTimeSlipRaw(requestParameters);
        return await response.value();
    }

}

/**
    * @export
    * @enum {string}
    */
export enum ListTasksBillingTypeEnum {
    Time = 'TIME',
    Fixed = 'FIXED'
}
